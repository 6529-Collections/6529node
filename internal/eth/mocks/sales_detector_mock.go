// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	tokens "github.com/6529-Collections/6529node/pkg/tdh/tokens"
)

// SalesDetector is an autogenerated mock type for the SalesDetector type
type SalesDetector struct {
	mock.Mock
}

// DetectIfSale provides a mock function with given fields: ctx, txHash, nftTransfers
func (_m *SalesDetector) DetectIfSale(ctx context.Context, txHash common.Hash, nftTransfers []tokens.TokenTransfer) (map[int]tokens.TransferType, error) {
	ret := _m.Called(ctx, txHash, nftTransfers)

	if len(ret) == 0 {
		panic("no return value specified for DetectIfSale")
	}

	var r0 map[int]tokens.TransferType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, []tokens.TokenTransfer) (map[int]tokens.TransferType, error)); ok {
		return rf(ctx, txHash, nftTransfers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, []tokens.TokenTransfer) map[int]tokens.TransferType); ok {
		r0 = rf(ctx, txHash, nftTransfers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]tokens.TransferType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash, []tokens.TokenTransfer) error); ok {
		r1 = rf(ctx, txHash, nftTransfers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSalesDetector creates a new instance of SalesDetector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSalesDetector(t interface {
	mock.TestingT
	Cleanup(func())
}) *SalesDetector {
	mock := &SalesDetector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
