package mocks_test

import (
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// BlockHashDb is an autogenerated mock type for the BlockHashDb type
type BlockHashDb struct {
	mock.Mock
}

// GetHash provides a mock function with given fields: blockNumber
func (_m *BlockHashDb) GetHash(blockNumber uint64) (common.Hash, bool) {
	ret := _m.Called(blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetHash")
	}

	var r0 common.Hash
	var r1 bool
	if rf, ok := ret.Get(0).(func(uint64) (common.Hash, bool)); ok {
		return rf(blockNumber)
	}
	if rf, ok := ret.Get(0).(func(uint64) common.Hash); ok {
		r0 = rf(blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(blockNumber)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// RevertFromBlock provides a mock function with given fields: fromBlock
func (_m *BlockHashDb) RevertFromBlock(fromBlock uint64) error {
	ret := _m.Called(fromBlock)

	if len(ret) == 0 {
		panic("no return value specified for RevertFromBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(fromBlock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHash provides a mock function with given fields: blockNumber, hash
func (_m *BlockHashDb) SetHash(blockNumber uint64, hash common.Hash) error {
	ret := _m.Called(blockNumber, hash)

	if len(ret) == 0 {
		panic("no return value specified for SetHash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, common.Hash) error); ok {
		r0 = rf(blockNumber, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlockHashDb creates a new instance of BlockHashDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockHashDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockHashDb {
	mock := &BlockHashDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
